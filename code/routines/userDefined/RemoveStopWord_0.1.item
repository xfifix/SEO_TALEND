package routines;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class RemoveStopWord {

    /**
     Remove Stop Word in String
     */
    public static String Remove(String rowValue, List<String> stopWords) {
    	if (stopWords != null) {
	    	List<String> resultWords = new ArrayList<String>();
	    	List<String> allMatches = new ArrayList<String>();
	    	Pattern pattern = Pattern.compile("[\\wàáâãäçèéêëœìíîïñòóôõöùúûüÿÁÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇŒ]+");
	    	Matcher matcher = pattern.matcher(rowValue);
	    	
	    	//Récupération des mots de la chaine
	    	while (matcher.find()) {
	    	   allMatches.add(matcher.group());
	    	}
	    	//On supprime les mot contenus dans la chaine qui sont dans les stop words
	    	for (String matchWord : allMatches) {
	    		Boolean needToBeAdd = true;
	    		for (String stopWord : stopWords) {
	    			if (stopWord != null
	    							&& matchWord != null
	    							&& matchWord.equalsIgnoreCase(stopWord) {
	    				needToBeAdd = false;
	    			}
				}
	    		if(needToBeAdd){
	    			resultWords.add(matchWord);
	    		}
			}
	    	//Reconstruction de la chaine
	    	StringBuilder builder = new StringBuilder();
	    	for(String word : resultWords) {
	    	    builder.append(word);
	    	    builder.append(" ");
	    	}
	    	return builder.toString();
    	}
    	else {
    		return null;
    	}
    }
}
