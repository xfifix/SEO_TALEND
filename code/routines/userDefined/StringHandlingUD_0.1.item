package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class StringHandlingUD {

	 /**
     * 
     * INDEX_OCC - Idem fonction Index avec notion nombre d'occurence ajoutée. utilisation INDEX_OCC(String 1,String 2, Integer 3)
     * @param (string) entree, @param (string) carRech , @param (Integer), @return (int). 
     * 
     * {talendTypes} String
     * 
     * {Category} StringHandlingUD
     * 
     * {param} string("hello_world_!") string: string.
     * 
     * {param} string("_") element: element
     * 
     * {param} Integer(2) Integer: Integer
     * 
     * {example}  INDEX_OCC("Hello_world_!","_",2)
     * {author} DPIT - 02/2012
     */
	public static int INDEX_OCC(String entree,String carRech, Integer nbCar) {

			if (entree.equals(null)||carRech.equals(null) ) {
				return -1;
			}
			if (nbCar == null)
			{
				nbCar=1;
			}
			//Recherche si le caractère existe x fois dans le string. Si n'existe pas  : -1
			if (StringHandling.COUNT(entree,carRech)<nbCar)
			{
				return -1;
			}
			
			int lgr=entree.length();
			int lgrCar=carRech.length();
			int pos=0;
		//	int i=0;
			int nbocc=0;
			String carAct;
			
			//boucle sur les caractères
			for (int j=0; j<lgr; j++ )
			{
			carAct = entree.substring(j,j+lgrCar);
			//System.out.println("*"+j+"*"+carAct);
			//Si trouvé , on ajoute 1 a
			if (carAct.equals(carRech))
					{
				nbocc=nbocc+1;
					}
			
				if (nbocc==nbCar) 
				{
					pos=j;
					j=lgr;

				}
					
			}
			
	
			return pos;
		}
}
