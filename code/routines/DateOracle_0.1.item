package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class DateOracle {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
	public static String FormatDatemod_oracle(String datevalue){
		//System.out.println("datevalue = " + datevalue);
		Integer Year=0;
		Integer Month =0;
		Integer Day=0;
		String jo="";
		String mo="";
		String ann="";
		String datestring="";
		
		Integer Y=Integer.parseInt(datevalue.substring(0,4));

		Integer M = Integer.parseInt(datevalue.substring(5,7));
		Integer D=Integer.parseInt(datevalue.substring(8,10));

			
		if (D<10)
		{
			jo ="0" + D.toString();
		}else{
			jo= D.toString();
		}
		
		if (M<10)
		{
			mo ="0" + M.toString();
		}else{
			mo= M.toString();
		}
		ann=Y.toString();
		
		
		datestring=ann+mo+jo;
		
		
		
	return datestring;
	
	}
}
